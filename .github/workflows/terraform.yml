name: "Terraform Provision Gym CRM Resources"

on:
  workflow_dispatch:
    inputs:
      customer_name:
        description: "Unique Customer Identifier (no spaces, lowercase recommended)"
        required: true
        type: string

jobs:
  provision-infra:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
      TF_WORK_DIR: ./environments/dev
      TF_CLOUD_ORGANIZATION: "ferrathorn"
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init (Terraform Cloud Backend)
        working-directory: ${{ env.TF_WORK_DIR }}
        run: terraform init

      - name: Select/Create Terraform Workspace (Customer Specific)
        working-directory: ${{ env.TF_WORK_DIR }}
        run: terraform workspace select -or-create ${{ github.event.inputs.customer_name }}

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORK_DIR }}
        run: |
          terraform plan \
            -var="customer_name=${{ github.event.inputs.customer_name }}"

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.TF_WORK_DIR }}
        continue-on-error: true
        run: |
          terraform apply -auto-approve \
            -var="customer_name=${{ github.event.inputs.customer_name }}"

      - name: Check Terraform Apply Status
        if: steps.apply.outcome == 'failure'
        run: |
          echo "Terraform apply failed. Starting cleanup."

      - name: Terraform Destroy (Cleanup on Failure)
        if: steps.apply.outcome == 'failure'
        working-directory: ${{ env.TF_WORK_DIR }}
        run: |
          terraform destroy -auto-approve \
            -var="customer_name=${{ github.event.inputs.customer_name }}"
